#-----------------------------------------------------------------------------
#
# MSTK configuration file template
#
#-----------------------------------------------------------------------------

set(MSTK_VERSION_MAJOR @MSTK_VERSION_MAJOR@ CACHE STRING "Major version of MSTK")
set(MSTK_VERSION_MINOR @MSTK_VERSION_MINOR@ CACHE STRING "Minor version of MSTK")
set(MSTK_VERSION_PATCH @MSTK_VERSION_PATCH@ CACHE STRING "Patch version of MSTK")
set(MSTK_VERSION "@MSTK_VERSION_MAJOR@.@MSTK_VERSION_MINOR@.@MSTK_VERSION_PATCH@" CACHE STRING "MSTK Version")


set(CMAKE_C_COMPILER @CMAKE_C_COMPILER@ CACHE FILEPATH "DEPRECATED: C Compiler used for compiling MSTK")
set(CMAKE_CXX_COMPILER @CMAKE_CXX_COMPILER@ CACHE FILEPATH "DEPRECATED: CXX Compiler used for compiling MSTK")


# MSTK Library target name
set(MSTK_LIBRARIES "mstk::@MSTKLIB@")

# MSTK Build info
set(MSTK_BUILD_TYPE @CMAKE_BUILD_TYPE@ CACHE STRING "DEPRECATED: MSTK build type")

# MSTK library 
set(MSTK_LIBRARY_DIR @INSTALL_DIR@/lib/ CACHE PATH "DEPRECATED: MSTK library location")
set(MSTK_LIBRARY_NAME @MSTKLIB@ CACHE STRING "DEPRECATED: MSTK library name")

# MSTK includes
set(MSTK_INCLUDE_DIR @INSTALL_DIR@/include CACHE PATH "DEPRECATED: MSTK include file locations")



# MSTK options and explicit variables (if someone wanted to use them directly)

set(ENABLE_PARALLEL @ENABLE_PARALLEL@ CACHE BOOL "Enable parallel mesh management")

if (ENABLE_PARALLEL)
  set(ENABLE_METIS @ENABLE_METIS@ CACHE BOOL "Enable use of METIS as a partitioner")
  if (ENABLE_METIS)
    # CMake <= 3.11
    set(METIS_DIR @METIS_DIR@ CACHE PATH "Path to top level METIS installation dir")
    # CMake > 3.11
    set(METIS_ROOT @METIS_ROOT@ CACHE PATH "Path to top level METIS installation dir")
  endif ()
  
  set(ENABLE_ZOLTAN @ENABLE_ZOLTAN@ CACHE BOOL "Enable use of ZOLTAN as a partitioner")
  if (ENABLE_ZOLTAN)
    # CMake <= 3.11
    set(Zoltan_DIR @Zoltan_DIR@ CACHE PATH "Path to top level ZOLTAN installation dir")
    # CMake > 3.11
    set(Zoltan_ROOT @Zoltan_ROOT@ CACHE PATH "Path to top level ZOLTAN installation dir")
  endif ()
  
endif()

set(ENABLE_ExodusII @ENABLE_ExodusII@ CACHE BOOL "Enable use of Exodus II libraries")

if (ENABLE_ExodusII)
  # CMake <= 3.11
  set(ExodusII_DIR @ExodusII_DIR@ CACHE PATH "Path to top level ExodusII installation dir")
  # CMake > 3.11
  set(ExodusII_ROOT @ExodusII_ROOT@ CACHE PATH "Path to top level ExodusII installation dir")

  # CMake <= 3.11 (using netCDF_ROOT here as netCDF_DIR is picking up the wrong path)
  set(netCDF_DIR @netCDF_DIR@ CACHE PATH "Path to top level netCDF installation dir")
  # CMake > 3.11
  set(netCDF_ROOT @netCDF_ROOT@ CACHE PATH "Path to top level netCDF installation dir")
endif()


if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.12)
  cmake_policy(SET CMP0074 NEW)  # Do not ignore PkgName_ROOT variables
endif ()

if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.15)
  set(CMAKE_FIND_PACKAGE_PREFER_CONFIG TRUE)  # First use Config files, then
                                              # fall back to Find modules
endif ()

# Find target dependencies

include(CMakeFindDependencyMacro)

# Temporarily modify CMAKE module path so we can find our custom
# modules for packages that don't have config files

set(SAVED_CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})
if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.15)
  list(PREPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/modules)
else ()
  set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules;${CMAKE_MODULE_PATH}")
endif ()

if (ENABLE_PARALLEL)
  if (ENABLE_METIS)
    find_dependency(METIS)
    if (TARGET ${METIS_LIBRARIES})
      set_property(TARGET ${METIS_LIBRARIES} PROPERTY IMPORTED_GLOBAL TRUE)
    endif ()
  endif ()
  if (ENABLE_ZOLTAN)
    find_dependency(Zoltan)
    if (TARGET ${Zoltan_LIBRARIES})
      set_property(TARGET ${Zoltan_LIBRARIES} PROPERTY IMPORTED_GLOBAL TRUE)
    endif ()
  endif ()
endif ()

if (ENABLE_ExodusII)
  find_dependency(ExodusII)
  if (TARGET ${ExodusII_LIBRARIES})
    set_property(TARGET ${ExodusII_LIBRARIES} PROPERTY IMPORTED_GLOBAL TRUE)
  endif ()
endif ()

# Restore original CMAKE_MODULE_PATH
set(CMAKE_MODULE_PATH ${SAVED_CMAKE_MODULE_PATH})


# include MSTK targets
include ("${CMAKE_CURRENT_LIST_DIR}/MSTKTargets.cmake")





