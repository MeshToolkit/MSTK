#!/bin/bash

# Configure script to build MSTK based application using MSTK config file
# 
# Run this script in a separate build directory
# DO NOT RUN THIS SCRIPT IN THE TOP LEVEL DIRECTORY OF THE PROJECT
#
# Run this script as ./do_configure and then run 'make install'
# or 'make' followed by 'make install'
#
# If you compiled MSTK with parallel support, find_package(MPI) and
# use mpicc and mpiCC as your C and C++ compilers within your
# CMakeLists.txt so that the right MPI includes and libraries are
# found
#
# Unless your MSTK installation specifically excluded ExodusII support,
# you must specify where the ExodusII and NetCDF packages are installed
# through ExodusII_DIR or ExodusII_LIB_DIR and NetCDF_DIR or NetCDF_LIB_DIR
#
#
# Use CMAKE_BUILD_TYPE:STRING="Release" for optimized code and
#                            ="Debug" for debug code
#                            ="RelWithDebugInfo" for optimized code with debug symbols
#                            ="MinSizeRel" for min size optimized library
#

# CMAKE_INSTALL_PREFIX indicates the top level directory for the installation
# the project executable or library and include files
#
#


rm -f CMakeCache.txt

SOURCE=path_to_my_app_source

/usr/bin/cmake \
  -D CMAKE_PREFIX_PATH:FILEPATH="semicolon/separated;list/of;directories/where/tpls/are;located" \
  -D CMAKE_C_COMPILER:FILEPATH="mpicc" \  
  -D CMAKE_BUILD_TYPE:STRING="Debug" \
  -D CMAKE_INSTALL_PREFIX:FILEPATH=$SOURCE \
  -D MSTK_ROOT:FILEPATH=path_to_mstk_installation \
  $SOURCE
